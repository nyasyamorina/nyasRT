#pragma once

#include <array>
#include <math.h>
#include <numeric>

#include "../geometry/Transform.hpp"
#include "../random.hpp"
#include "../Sampler.hpp"
#include "../Interpolation.hpp"
#include "LightSource.hpp"


class SunLight final : public LightSource
{
    static constexpr f32 solar_radius = deg2rad(0.267f);
    static constexpr f32 solor_solid_angle = defaults<f32>::pi * sqr(solar_radius); // assume `solar_radius ~= 0`

    static constexpr vec2<u32> solor_radiances_table_size = vec2<u32>(16, 16);
    static constexpr std::array<RGB, prod(solor_radiances_table_size)> solor_radiances =
    {
        RGB(    39.4028,     1.98004, 5.96046e-08), RGB(68821.4,   29221.3,     3969.28), RGB( 189745,  116333,     43283.4), RGB( 284101,  199843,  103207), RGB( 351488,  265139,  161944), RGB( 400584,  315075,  213163), RGB( 437555,  353806,  256435), RGB( 466261,  384480,  292823), RGB(489140,  409270,  323569), RGB(507776,  429675,  349757), RGB(523235,  446739,  372260), RGB(536260, 461207,  391767), RGB(547379, 473621,  408815), RGB(556978, 484385,  423827), RGB(565348, 493805, 437137), RGB(572701, 502106, 449002),
        RGB(    34.9717,   0.0775114,           0), RGB(  33531,   11971.9,     875.627), RGB( 127295,   71095,     22201.3), RGB( 216301,  142827, 66113.9), RGB( 285954,  205687,  115900), RGB( 339388,  256990,  163080), RGB( 380973,  298478,  205124), RGB( 414008,  332299,  241816), RGB(440780,  360220,  273675), RGB(462869,  383578,  301382), RGB(481379,  403364,  325586), RGB(497102, 420314,  346848), RGB(510615, 434983,  365635), RGB(522348, 447795,  382333), RGB(532628, 459074, 397255), RGB(541698, 469067, 410647),
        RGB(    10.0422,           0,    0.318865), RGB(16312.8,   4886.47,       84.98), RGB(85310.4, 43421.5,     11226.2), RGB( 164586,  102046, 42200.5), RGB( 232559,  159531, 82822.4), RGB( 287476,  209581,  124663), RGB( 331656,  251771,  163999), RGB( 367569,  287173,  199628), RGB(397168,  317025,  231420), RGB(421906,  342405,  259652), RGB(442848,  364181,  284724), RGB(460784, 383030,  307045), RGB(476303, 399483,  326987), RGB(489856, 413955,  344876), RGB(501789, 426774, 360988), RGB(512360, 438191, 375548),
        RGB(     2.3477, 5.96046e-08,    0.129991), RGB(117.185,   30.0648,           0), RGB(57123.3, 26502.1,      5565.4), RGB( 125170, 72886.2, 26819.8), RGB( 189071,  123708, 59081.9), RGB( 243452,  170892, 95209.2), RGB( 288680,  212350,  131047), RGB( 326303,  248153,  164740), RGB(357842,  278989,  195638), RGB(384544,  305634,  223657), RGB(407381,  328788,  248954), RGB(427101, 349038,  271779), RGB(444282, 366866,  292397), RGB(459372, 382660,  311064), RGB(472723, 396734, 328012), RGB(484602, 409337, 343430),
        RGB(   0.383395,           0,    0.027703), RGB(58.0534,   12.8383,           0), RGB(38221.6, 16163.6,     2681.55), RGB(95147.4,   52043, 16954.8), RGB( 153669, 95910.9,   42062), RGB( 206127,  139327, 72640.8), RGB( 251236,  179082,  104653), RGB( 289639,  214417,  135896), RGB(322383,  245500,  165343), RGB(350467,  272796,  192613), RGB(374734,  296820,  217644), RGB(395864, 318050,  240533), RGB(414400, 336900,  261440), RGB(430773, 353719,  280544), RGB(445330, 368800, 298027), RGB(458337, 382374, 314041),
        RGB(  0.0560895,           0,  0.00474608), RGB(44.0061,   8.32402,           0), RGB(  25559, 9849.99,     1237.01), RGB(72294.8, 37148.7,   10649), RGB( 124859, 74345.6, 29875.8), RGB( 174489,  113576, 55359.1), RGB( 218617,  151011, 83520.3), RGB( 257067,  185252,  112054), RGB(290413,  216016,  139698), RGB(319390,  243473,  165842), RGB(344686,  267948,  190241), RGB(366896, 289801,  212852), RGB(386513, 309371,  233736), RGB(403942, 326957,  252998), RGB(419513, 342823, 270764), RGB(433487, 357178, 287149),
        RGB( 0.00811136,           0, 0.000761211), RGB(38.0318,   6.09287,           0), RGB(17083.4, 5996.83,     530.476), RGB(54909.7, 26508.7,  6634.5), RGB( 101423, 57618.7, 21163.3), RGB( 147679,   92573, 42135.2), RGB( 190207,  127327, 66606.4), RGB( 228134,  160042, 92352.6), RGB(261593,  190061,  117993), RGB(291049,  217290,  142758), RGB(317031,  241874,  166258), RGB(340033, 264051,  188331), RGB(360490, 284081,  208945), RGB(378771, 302212,  228135), RGB(395184, 318667, 245976), RGB(409974, 333634, 262543),
        RGB( 0.00118321,           0, 0.000119328), RGB(34.5228,   4.62524,           0), RGB(11414.1, 3646.94,     196.889), RGB(41690.9, 18909.8, 4091.39), RGB(82364.6, 44646.9, 14944.8), RGB( 124966, 75444.4, 32024.3), RGB( 165467,  107347, 53075.4), RGB( 202437,  138252, 76076.7), RGB(235615,  167214,   99627), RGB(265208,  193912,  122858), RGB(291580,  218327,  145272), RGB(315124, 240580,  166611), RGB(336208, 260851,  186761), RGB(355158, 279331,  205696), RGB(372256, 296206, 223440), RGB(387729, 311636, 240030),
        RGB(0.000174701,           0, 1.84774e-05), RGB(31.4054,    3.4608,           0), RGB(7624.24, 2215.02,     48.0059), RGB(31644.8, 13484.4,  2490.1), RGB(66872.4, 34589.1,   10515), RGB( 105728, 61477.4, 24300.5), RGB( 143926, 90494.6, 42256.1), RGB( 179617,  119420, 62635.3), RGB(212200,  147105, 84088.4), RGB(241645,  173041,  105704), RGB(268159,  197064,  126911), RGB(292028, 219187,  147374), RGB(313550, 239512,  166913), RGB(333008, 258175,  185447), RGB(350650, 275321, 202953), RGB(366683, 291081, 219433),
        RGB(2.61664e-05,           0, 2.86102e-06), RGB(27.3995,   2.42835, 5.96046e-08), RGB(391.889, 104.066,           0), RGB(24013.1, 9611.97, 1489.37), RGB(54282.4, 26792.1, 7366.53), RGB(  89437,   50090, 18406.3), RGB( 125174, 76280.7, 33609.8), RGB( 159354,  103145, 51538.2), RGB(191098,  129407, 70945.4), RGB(220163,  154409, 90919.4), RGB(246607,  177864,  110847), RGB(270613, 199690,  130337), RGB(292410, 219912,  149156), RGB(312229, 238614,  167173), RGB(330289, 255902, 184328), RGB(346771, 271876, 200589),
        RGB(3.93391e-06,           0, 4.76837e-07), RGB(21.8815,   1.51091,           0), RGB(106.645, 26.2423,           0), RGB(18217.8, 6848.77, 869.811), RGB(  44054, 20748.7,  5134.5), RGB(75644.5,   40807, 13913.2), RGB( 108852, 64293.6, 26704.2), RGB( 141364, 89082.8, 42380.1), RGB(172081,  113831, 59831.4), RGB(200579,  137777, 78179.7), RGB(226776,  160529, 96794.7), RGB(250759, 181920,  115250), RGB(272686, 201910,  133270), RGB(292739, 220530,  150685), RGB(311103, 237847, 167398), RGB(327934, 253933, 183349),
        RGB(6.55651e-07,           0, 1.19209e-07), RGB(15.4347,  0.791314,           0), RGB(  67.98, 15.4685,           0), RGB(13818.5, 4877.71, 490.832), RGB(35746.5, 16065.3, 3556.94), RGB(63969.8, 33240.3, 10492.5), RGB(  94648, 54185.5, 21192.5), RGB( 125394, 76932.4, 34825.1), RGB(154946,  100125, 50435.6), RGB(182726,  122930, 67203.7), RGB(208530,  144877, 84504.4), RGB(232352, 165726,  101891), RGB(254283, 185376,  119059), RGB(274458, 203811,  135807), RGB(293024, 221062, 152009), RGB(310113, 237169, 167579),
        RGB(5.96046e-08,           0,           0), RGB(9.57723,  0.336247,           0), RGB(52.9113, 11.1074,           0), RGB(10479.8, 3472.19, 262.637), RGB(29000.9, 12436.5, 2445.87), RGB(54089.5, 27073.4, 7891.84), RGB(82288.3, 45662.7, 16796.5), RGB( 111218, 66434.7, 28595.3), RGB(139508,   88064, 42494.5), RGB(166453,  109678, 57749.2), RGB(191743,  130747, 73756.6), RGB(215288, 150968, 90064.3), RGB(237114, 170191,  106348), RGB(257311, 188355,  122384), RGB(275989, 205455, 138022), RGB(293255, 221507, 153152),
        RGB(          0,           0,           0), RGB(5.37425,  0.109694,           0), RGB(44.9811, 8.68891, 5.96046e-08), RGB(7946.76, 2470.32, 128.128), RGB(23524.7, 9625.27, 1666.58), RGB(45729.5, 22047.9, 5917.85), RGB(71535.2, 38477.1, 13293.2), RGB(98636.4, 57365.7, 23460.6), RGB(125598,   77452,   35785), RGB(151620,   97851,   49607), RGB(176299,  117990,   64359), RGB(199469, 137520, 79594.4), RGB(221098, 156245, 94979.6), RGB(241228, 174066,  110274), RGB(259937, 190947, 125309), RGB(277307, 206875, 139956),
        RGB(          0,           0,           0), RGB(2.83079, 0.0199037,           0), RGB(40.0718, 7.10214,           0), RGB(6025.35, 1756.45, 51.1916), RGB(19080.1, 7447.79, 1122.67), RGB(  38657, 17952.9, 4422.16), RGB(62181.1, 32419.5, 10503.8), RGB(87471.2, 49531.4, 19230.6), RGB(113069, 68115.1, 30117.9), RGB(138102, 87295.1, 42596.4), RGB(162092,  106474, 56143.2), RGB(184805, 125266, 70327.1), RGB(206156, 143438, 84812.9), RGB(226144, 160857, 99349.8), RGB(244814, 177459, 113755), RGB(262220, 193206, 127887),
        RGB(          0,           0,           0), RGB(1.43779,         0,  0.00738072), RGB(36.6245, 5.93644,           0), RGB(4568.17, 1248.02, 9.13028), RGB(15473.4, 5761.51, 745.266), RGB(32674.7, 14616.6, 3291.16), RGB(54045.1, 27313.1, 8284.85), RGB(77563.8, 42764.4, 15747.9), RGB(101783, 59900.8, 25332.8), RGB(125782, 77874.7, 36561.6), RGB(149022, 96078.4,   48962), RGB(171213, 114101, 62125.3), RGB(192218, 131678, 75721.7), RGB(211998, 148648, 89495.8), RGB(230564, 164920, 103255), RGB(247950, 180437,  11684)
    };

    static CONST_FUNC RGB get_solor_radiance(f32 ctheta, f32 turbidity) noexcept
    {
        vec2g pos(ctheta, (turbidity - 1) / 9);
        pos *= (solor_radiances_table_size - static_cast<fg>(1)) / solor_radiances_table_size;
        return solor_solid_angle * Interpolation::bilinear(solor_radiances.data(), solor_radiances_table_size, pos);
    }

public:

    normal3g _solar_direction;
    f32 _turbidity;
    vec3g _u, _v;
    RGB _solor_radiance;

public:

    CONST_FUNC SunLight() noexcept
    : _solar_direction{normalize(defaults<vec3g>::X + defaults<vec3g>::Z)}, _turbidity{5.0f} {}
    CONST_FUNC SunLight(normal3g const& solar_direction_, f32 turbidity_)
    {
        solar_direcion(solar_direction_).turbidity(turbidity_);
    }
    virtual ~SunLight() noexcept = default;

    CONST_FUNC SunLight & solar_direcion(normal3g const& value) noexcept
    {
        _solar_direction = normalize(value);
        return *this;
    }
    CONST_FUNC SunLight & turbidity(f32 value) noexcept
    {
        _turbidity = std::min(std::max(value, 1.0f), 10.0f);
        return *this;
    }

    CONST_FUNC normal3g const& solar_direcion() const noexcept
    {
        return _solar_direction;
    }
    CONST_FUNC f32 turbidity() const noexcept
    {
        return _turbidity;
    }


    virtual CONST_FUNC bool prepare() noexcept override
    {
        fg theta = std::acos(_solar_direction.z);
        fg phi = std::atan2(_solar_direction.y, _solar_direction.x);

        Rotation rot(phi, defaults<fg>::half_pi - theta, 0);

        _u = solar_radius * rot.apply(defaults<vec3g>::Y);
        _v = solar_radius * rot.apply(defaults<vec3g>::Z);

        _solor_radiance = get_solor_radiance(_solar_direction.z, _turbidity);
        return true;
    }

    virtual bool test_hit(Ray const& ray, fg max_ray_time) const noexcept override
    {
        if (!std::isfinite(max_ray_time)) { return false; }
        return length2(cross(ray.direction, _solar_direction)) <= sqr(solar_radius);
    }

    virtual RGB light(Ray const& ray) const noexcept override
    {
        return _solor_radiance;
    }

    virtual CONST_FUNC std::tuple<normal3g, fg> sample(vec3g const& point) const noexcept override
    {
        vec2g pos = Sampler::disk(random.uniform01<vec2g>());
        normal3g direction = normalize(_solar_direction + pos.x * _u + pos.y * _v);
        return {direction, defaults<fg>::inf};
    }
};
